[{"id":"ivit_t","user_id":"2441859e-19ea-4667-81bd-4ff5f4a92d51","name":"iVIT_T","content":"\"\"\"\nauthor: Jay\nversion: 0.5.18\nlicence: MIT\n\"\"\"\n\nimport ast\nfrom typing import List\n\nimport httpx\nfrom pydantic import BaseModel, Field\n\n\nclass TrainingParameter(BaseModel):\n    training_method: str\n    model: str\n    batch_size: int\n    step: int\n    input_shape: List[int]\n\n\nclass TrainingConfig(BaseModel):\n    project_uuid: str\n    training_parameter: TrainingParameter\n\n\nclass Tools:\n    class Valves(BaseModel):\n        API_BASE_URL: str = Field(\n            default=\"http://172.16.92.144\",\n            description=\"Base URL for accessing iVIT-T endpoints.\",\n        )\n        API_PORT: str = Field(\n            default=\"6530\",\n            description=\"Port for accessing iVIT-T endpoints.\",\n        )\n\n    def __init__(self):\n        self.valves = self.Valves()\n\n    def get_model(\n        self,\n        __model__: dict = {\n            \"id\": \"test\",\n            \"name\": \"test\",\n            \"object\": \"model\",\n            \"created\": 1741659012,\n            \"owned_by\": \"ollama\",\n            \"info\": {\n                \"id\": \"test\",\n                \"user_id\": \"2441859e-19ea-4667-81bd-4ff5f4a92d51\",\n                \"data_permission_level\": 0,\n                \"base_model_id\": \"llama3.1:8b\",\n                \"name\": \"test\",\n                \"params\": {},\n                \"meta\": {\n                    \"profile_image_url\": \"/static/favicon.png\",\n                    \"description\": None,\n                    \"capabilities\": {\"vision\": True, \"citations\": True},\n                    \"suggestion_prompts\": None,\n                    \"tags\": [],\n                    \"toolIds\": [\"sample\"],\n                },\n                \"access_control\": {\n                    \"read\": {\"group_ids\": [], \"user_ids\": []},\n                    \"write\": {\"group_ids\": [], \"user_ids\": []},\n                },\n                \"is_active\": True,\n                \"updated_at\": 1741659012,\n                \"created_at\": 1741659012,\n            },\n            \"preset\": True,\n            \"actions\": [],\n        },\n    ) -> dict:\n        \"\"\"\n        Get model name\n        \"\"\"\n\n        return __model__[\"info\"][\"base_model_id\"]\n\n    def get_ivit_project(self) -> str:\n        \"\"\"\n        Get all projects from iVIT-T.\n\n        :return: A string covert form dictionary that containing project information or an error message.\n        \"\"\"\n        url = f\"{self.valves.API_BASE_URL}:{self.valves.API_PORT}/get_all_project\"\n\n        try:\n            response = httpx.get(url, timeout=10)\n            response.raise_for_status()\n            data = response.json()\n\n            projects = data.get(\"data\", {})\n            if not projects:\n                return {\"message\": \"No project in iVIT\", \"projects\": []}\n\n            # print(projects)\n            return str(projects)\n\n        except httpx.RequestError as e:\n            return {\"error\": f\"Failed to call API: {e}\"}\n        except httpx.HTTPStatusError as e:\n            return {\"error\": f\"HTTP error: {e}\"}\n        except KeyError:\n            return {\"error\": \"Response format error\"}\n\n    def training_new_iteration(self, project_name: str) -> str:\n        \"\"\"\n        Initiates a new training iteration for the specified project in iVIT-T.\n\n        :param project_name: The name of the project to start a new training iteration for.\n        :return: A string containing the task UUID if successful, or an error message.\n        \"\"\"\n        url = f\"{self.valves.API_BASE_URL}:{self.valves.API_PORT}/training_schedule\"\n        projects = ast.literal_eval(self.get_ivit_project())\n        match_uuid = None\n        for uuid, project in projects.items():\n            if project[\"project_name\"] == project_name:\n                match_uuid = uuid\n\n        if not match_uuid:\n            return \"Failed to find project\"\n\n        data = {\n            \"project_uuid\": str(match_uuid),\n            \"training_parameter\": {\n                \"training_method\": \"Quick Training\",\n                \"model\": \"yolov4-tiny\",\n                \"batch_size\": 1,\n                \"step\": 10000,\n                \"input_shape\": [32, 32, 3],\n            },\n        }\n        training_config = TrainingConfig(**data)\n        json_data = training_config.model_dump()\n        print(f\"\\n\\n\\n\\n {data}\\n\\n\\n\\n\")\n        response = httpx.post(url, json=json_data)\n        if response.status_code == 200:\n            response_data = response.json()\n            if response_data.get(\"status\") == 200:\n                task_uuid = response_data[\"data\"].get(\"task_uuid\")\n                print(\n                    f\"The training has been successfully submitted to iVIT-T. The generated Task UUID is {task_uuid}.\"\n                )\n                return f\"The training has been successfully submitted to iVIT-T. The generated Task UUID is {task_uuid}.\"\n            else:\n                print(f\"Request failed: {response_data.get('message')}\")\n                return f\"Request failed: {response_data.get('message')}\"\n        else:\n            print(f\"HTTP Error: {response.status_code}\")\n            return f\"HTTP Error: {response.status_code}\"\n\n\nif __name__ == \"__main__\":\n    tools = Tools()\n    print(tools.training_new_iteration(project_name=\"fruit_object_detection\"))\n","specs":[{"name":"get_ivit_project","description":"Get all projects from iVIT-T.","parameters":{"properties":{},"type":"object"}},{"name":"get_model","description":"Get model name","parameters":{"properties":{},"type":"object"}},{"name":"training_new_iteration","description":"Initiates a new training iteration for the specified project in iVIT-T.","parameters":{"properties":{"project_name":{"description":"The name of the project to start a new training iteration for.","type":"string"}},"required":["project_name"],"type":"object"}}],"meta":{"description":"All Operator to  iVIT-T.","manifest":{"author":"Jay","version":"0.5.18","licence":"MIT"}},"access_control":null,"updated_at":1741757789,"created_at":1741670817}]