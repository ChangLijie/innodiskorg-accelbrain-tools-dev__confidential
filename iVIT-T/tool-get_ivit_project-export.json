[{"id":"get_ivit_project","user_id":"2441859e-19ea-4667-81bd-4ff5f4a92d51","name":"get_ivit_project","content":"\"\"\"\nauthor: Jay\nversion: 1.0\nlicence: MIT\n\"\"\"\n\nimport httpx\nfrom pydantic import BaseModel, Field\n\n\nclass Tools:\n    class Valves(BaseModel):\n\n        API_BASE_URL: str = Field(\n            default=\"http://172.16.92.144\",\n            description=\"Base URL for accessing iVIT-T endpoints.\",\n        )\n        API_PORT: str = Field(\n            default=\"6530\",\n            description=\"Port for accessing iVIT-T endpoints.\",\n        )\n        API_ROUTER: str = Field(\n            default=\"get_all_project\",\n            description=\"Router for accessing iVIT-T endpoints.\",\n        )\n\n    def __init__(self):\n        self.valves = self.Valves()\n\n    def get_ivit_project(self) -> str:\n        \"\"\"\n        Get all projects from iVIT-T.\n\n        :return: A string covert form dictionary that containing project information or an error message.\n        \"\"\"\n        url = f\"{self.valves.API_BASE_URL}:{self.valves.API_PORT}/{self.valves.API_ROUTER}\"\n\n        try:\n            response = httpx.get(url, timeout=10)\n            response.raise_for_status()\n            data = response.json()\n\n            projects = data.get(\"data\", {})\n            if not projects:\n                return {\"message\": \"No project in iVIT\", \"projects\": []}\n\n            print(projects)\n            return str(projects)\n\n        except httpx.RequestError as e:\n            return {\"error\": f\"Failed to call API: {e}\"}\n        except httpx.HTTPStatusError as e:\n            return {\"error\": f\"HTTP error: {e}\"}\n        except KeyError:\n            return {\"error\": \"Response format error\"}\n\n    def get_user_name_and_email_and_id(self, __user__: dict = {}) -> str:\n        \"\"\"\n        Get the user name, Email and ID from the user object.\n        \"\"\"\n\n        # Do not include :param for __user__ in the docstring as it should not be shown in the tool's specification\n        # The session user object will be passed as a parameter when the function is called\n\n        print(__user__)\n        result = \"\"\n\n        if \"name\" in __user__:\n            result += f\"User: {__user__['name']}\"\n        if \"id\" in __user__:\n            result += f\" (ID: {__user__['id']})\"\n        if \"email\" in __user__:\n            result += f\" (Email: {__user__['email']})\"\n\n        if result == \"\":\n            result = \"User: Unknown\"\n\n        return result\n\n\n# 測試用\nif __name__ == \"__main__\":\n    tools = Tools()\n    print(tools.get_ivit_project())\n","specs":[{"name":"get_ivit_project","description":"Get all projects from iVIT-T.","parameters":{"properties":{},"type":"object"}},{"name":"get_user_name_and_email_and_id","description":"Get the user name, Email and ID from the user object.","parameters":{"properties":{},"type":"object"}}],"meta":{"description":"get_ivit_project","manifest":{"author":"Jay","version":"1.0","licence":"MIT"}},"access_control":null,"updated_at":1741916382,"created_at":1741570927}]